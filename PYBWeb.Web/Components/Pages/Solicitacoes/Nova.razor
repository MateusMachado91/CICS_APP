@page "/solicitacoes/nova"
@using PYBWeb.Domain.Entities
@using PYBWeb.Domain.Interfaces
@using PYBWeb.Domain.Enums
@using PYBWeb.Web.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject ISolicitacaoRepository SolicitacaoRepository
@inject IAmbienteRepository AmbienteRepository
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Nova Solicitação - PYB CICS</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="display-6 text-primary">
                <i class="bi bi-plus-circle"></i> Nova Solicitação CICS
            </h1>
        </div>
        <div class="col-md-4 text-end">
            <a href="/solicitacoes" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Voltar
            </a>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Informações da Solicitação</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@novaModel" OnValidSubmit="@SalvarSolicitacao" FormName="NovaSolicitacaoForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="row">
                        <!-- Título -->
                        <div class="col-md-8 mb-3">
                            <label for="titulo" class="form-label">Título da Solicitação <span class="text-danger">*</span></label>
                            <InputText id="titulo" class="form-control" @bind-Value="novaModel.Titulo" placeholder="Digite o título da solicitação..." />
                            <ValidationMessage For="@(() => novaModel.Titulo)" />
                        </div>

                        <!-- Tipo de Tabela -->
                        <div class="col-md-4 mb-3">
                            <label for="tipoTabela" class="form-label">Tipo de Tabela CICS <span class="text-danger">*</span></label>
                            <InputSelect id="tipoTabela" class="form-select" @bind-Value="novaModel.TipoTabela">
                                <option value="">Selecione...</option>
                                <option value="@TipoTabela.DCT">DCT - Destination Control Table</option>
                                <option value="@TipoTabela.FCT">FCT - File Control Table</option>
                                <option value="@TipoTabela.PCT">PCT - Program Control Table</option>
                                <option value="@TipoTabela.PPT">PPT - Processing Program Table</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => novaModel.TipoTabela)" />
                        </div>
                    </div>

                    <div class="row">
                        <!-- Ambiente -->
                        <div class="col-md-6 mb-3">
                            <label for="ambiente" class="form-label">Ambiente <span class="text-danger">*</span></label>
                            <InputSelect id="ambiente" class="form-select" @bind-Value="novaModel.AmbienteId">
                                <option value="">Selecione o ambiente...</option>
                                @foreach (var ambiente in ambientes)
                                {
                                    <option value="@ambiente.Id">@ambiente.Nome - @ambiente.Descricao</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => novaModel.AmbienteId)" />
                        </div>

                        <!-- Prioridade -->
                        <div class="col-md-3 mb-3">
                            <label for="prioridade" class="form-label">Prioridade</label>
                            <InputSelect id="prioridade" class="form-select" @bind-Value="novaModel.Prioridade">
                                <option value="1">Baixa</option>
                                <option value="2">Normal</option>
                                <option value="3">Alta</option>
                                <option value="4">Urgente</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => novaModel.Prioridade)" />
                        </div>

                        <!-- Data Limite -->
                        <div class="col-md-3 mb-3">
                            <label for="dataLimite" class="form-label">Data Limite</label>
                            <InputDate id="dataLimite" class="form-control" @bind-Value="novaModel.DataLimite" />
                        </div>
                    </div>

                    <!-- Descrição -->
                    <div class="mb-3">
                        <label for="descricao" class="form-label">Descrição <span class="text-danger">*</span></label>
                        <InputTextArea id="descricao" class="form-control" rows="4" @bind-Value="novaModel.Descricao" 
                                       placeholder="Descreva detalhadamente a solicitação..."></InputTextArea>
                        <ValidationMessage For="@(() => novaModel.Descricao)" />
                    </div>

                    <!-- Justificativa -->
                    <div class="mb-3">
                        <label for="justificativa" class="form-label">Justificativa <span class="text-danger">*</span></label>
                        <InputTextArea id="justificativa" class="form-control" rows="3" @bind-Value="novaModel.Justificativa" 
                                       placeholder="Justifique a necessidade desta solicitação..."></InputTextArea>
                        <ValidationMessage For="@(() => novaModel.Justificativa)" />
                    </div>

                    <div class="row">
                        <!-- Usuário Solicitante -->
                        <div class="col-md-6 mb-3">
                            <label for="usuarioSolicitante" class="form-label">Usuário Solicitante <span class="text-danger">*</span></label>
                            <InputText id="usuarioSolicitante" class="form-control" @bind-Value="novaModel.UsuarioSolicitante" 
                                       placeholder="Login do usuário solicitante" />
                            <ValidationMessage For="@(() => novaModel.UsuarioSolicitante)" />
                        </div>

                        <!-- Área Solicitante -->
                        <div class="col-md-6 mb-3">
                            <label for="areaSolicitante" class="form-label">Área Solicitante <span class="text-danger">*</span></label>
                            <InputText id="areaSolicitante" class="form-control" @bind-Value="novaModel.AreaSolicitante" 
                                       placeholder="Área/Departamento solicitante" />
                            <ValidationMessage For="@(() => novaModel.AreaSolicitante)" />
                        </div>
                    </div>

                    <!-- Observações -->
                    <div class="mb-4">
                        <label for="observacoes" class="form-label">Observações</label>
                        <InputTextArea id="observacoes" class="form-control" rows="2" @bind-Value="novaModel.Observacoes" 
                                       placeholder="Observações adicionais (opcional)..."></InputTextArea>
                        <ValidationMessage For="@(() => novaModel.Observacoes)" />
                    </div>

                    <!-- Botões de Ação -->
                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" @onclick="VoltarLista">
                            <i class="bi bi-x-circle"></i> Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Salvando...</span>
                            }
                            else
                            {
                                <i class="bi bi-check-circle"></i>
                                <span>Criar Solicitação</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@if (showSuccessAlert)
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
        <div class="toast show" role="alert">
            <div class="toast-header">
                <i class="bi bi-check-circle-fill text-success me-2"></i>
                <strong class="me-auto">Sucesso</strong>
                <button type="button" class="btn-close" @onclick="() => showSuccessAlert = false"></button>
            </div>
            <div class="toast-body">
                Solicitação criada com sucesso!
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showSuccessAlert = false;
    private List<Ambiente> ambientes = new();
    private NovaSolicitacaoModel novaModel = new();

    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
        InicializarNovoModel();
    }

    private async Task CarregarDados()
    {
        try
        {
            var todosAmbientes = await AmbienteRepository.GetAllAsync();
            ambientes = todosAmbientes.ToList();
        }
        catch (Exception)
        {
            ambientes = new List<Ambiente>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void InicializarNovoModel()
    {
        novaModel = new NovaSolicitacaoModel
        {
            Prioridade = 2 // Normal
        };
    }

    private async Task SalvarSolicitacao()
    {
        isSaving = true;
        try
        {
            // Debug: verificar se os dados estão chegando
            Console.WriteLine($"Titulo: {novaModel.Titulo}");
            Console.WriteLine($"TipoTabela: {novaModel.TipoTabela}");
            Console.WriteLine($"AmbienteId: {novaModel.AmbienteId}");
            
            // Verificar se dados essenciais estão preenchidos
            if (string.IsNullOrEmpty(novaModel.Titulo) || 
                !novaModel.TipoTabela.HasValue || 
                !novaModel.AmbienteId.HasValue)
            {
                Console.WriteLine("Dados obrigatórios não preenchidos");
                return;
            }
            
            // Converter o modelo para entidade
            var novaSolicitacao = new Solicitacao
            {
                Titulo = novaModel.Titulo,
                Descricao = novaModel.Descricao,
                Justificativa = novaModel.Justificativa,
                TipoTabela = novaModel.TipoTabela!.Value,
                DataLimite = novaModel.DataLimite,
                Prioridade = novaModel.Prioridade,
                UsuarioSolicitante = novaModel.UsuarioSolicitante,
                AreaSolicitante = novaModel.AreaSolicitante,
                Observacoes = novaModel.Observacoes,
                AmbienteId = novaModel.AmbienteId!.Value,
                Status = StatusSolicitacao.Pendente,
                DataCriacao = DateTime.Now,
                UsuarioCriacao = "CurrentUser", // TODO: Implementar autenticação
                Ativo = true
            };
            
            // Gerar número da solicitação
            novaSolicitacao.Numero = await SolicitacaoRepository.GerarProximoNumeroAsync();
            
            // Salvar no banco
            await SolicitacaoRepository.AddAsync(novaSolicitacao);
            
            Console.WriteLine($"Solicitação criada com número: {novaSolicitacao.Numero}");
            
            // Mostrar sucesso e redirecionar
            showSuccessAlert = true;
            StateHasChanged();
            
            await Task.Delay(2000); // Aguarda 2 segundos para mostrar o alerta
            Navigation.NavigateTo("/solicitacoes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void VoltarLista()
    {
        Navigation.NavigateTo("/solicitacoes");
    }
}